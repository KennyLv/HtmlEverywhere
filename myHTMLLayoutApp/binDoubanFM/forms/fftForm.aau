import win.ui;
/*DSG{{*/
var fftForm = ..win.form(text="±ó¸ç¶¹°êFM - ÆµÆ×";right=310;bottom=125;bgcolor=0;border="none";exmode="toolwindow";parent=..mainForm;sysmenu=false)
fftForm.add()
/*}}*/

import gdip;

UpdateLayeredWindow = ::User32.api("UpdateLayeredWindow","int(int hwnd,pointer pDCDst, struct pptDst, struct psize, pointer pDCSrc, struct pptSrc, INT crKey, struct pblend, INT dwFlags)");
	
fftForm.transparent(true);

fftNum = 66;
FFTPeacks = {};
FFTFallOff = {};
for(i=1;math.floor(fftNum/2)+1;1) {
	FFTPeacks[i] = 0;
}

drawFFT = function(fftData) {
	if(!fftData) return false;
	var x,y,cx,cy = fftForm.getPos();
	var fftHeight = 120;
	var w = 8;

	var areaColor,lineColor;
	if(..enableAero) {
		areaColor = 0x66626262;
		lineColor = 0xBB626262;
	}
	else {
		areaColor = 0x665eae98;
		lineColor = 0xBB5eae98;
	}
		
	hdcTemp = ::GetDC(0);
	m_hdcMemory = ::CreateCompatibleDC(hdcTemp);
	hBitMap = ::CreateCompatibleBitmap(hdcTemp,cx,cy);
	::SelectObject(m_hdcMemory, hBitMap);
	::ReleaseDC(0, hdcTemp);
	
	var Graphics = gdip.graphics(m_hdcMemory);
	
	var j = 1;
	for(i=1;fftNum;2) {
		if(!fftData[i]) return false;
		FFTFallOff[j] = 0;
		di = math.floor((math.abs(fftData[i])+math.abs(fftData[i+1]))/2*900);
    	if(di > fftHeight) di = fftHeight;
    	if(di >= FFTPeacks[j]) FFTPeacks[j] = di else FFTPeacks[j] = FFTPeacks[j] -3;
    	if(di >= FFTFallOff[j]) FFTFallOff[j] = di else FFTFallOff[j] = FFTFallOff[j] - 5;
    	if((fftHeight - FFTPeacks[j]) > fftHeight) FFTPeacks[j] = 0;
    	if((fftHeight - FFTFallOff[j]) > fftHeight) FFTFallOff[j] = 0;
		if(FFTPeacks[j]<1) FFTPeacks[j] = 1;
		if(FFTFallOff[j]<0) FFTFallOff[j] = 0;
		
		// »­¾ØÐÎ
		var re,Brush = gdip.CreateSolidFill(areaColor);
		Graphics.fillRectangle( Brush, j * (w + 1), fftHeight - FFTFallOff[j], w, FFTFallOff[j] );
		// »­¶¥²¿½µÂäÏßÌõ
		var re,Pen = gdip.CreatePen1( lineColor, 1, 2/*_GdipUnitPixel*/ );
		Graphics.drawLine( Pen, j * (w + 1), fftHeight - FFTPeacks[j], j * (w + 1) + w-1, fftHeight - FFTPeacks[j]);
		
		gdip.DeletePen(Pen)
 		gdip.DeleteBrush(Brush)
		
		j++;
	}
	
	ptWinPos = ::POINT(x,y);
	sizeWindow = ::POINT(cx,cy );
	ptSrc = ::POINT();
	
	var BLENDFUNCTION = class {
		BYTE BlendOp;
		BYTE BlendFlags;
		BYTE SourceConstantAlpha;
		BYTE AlphaFormat;
	}
	
	Blend=BLENDFUNCTION();
	Blend.SourceConstantAlpha = 255;
	Blend.AlphaFormat = 1;
	
	bRet = UpdateLayeredWindow(fftForm.hwnd, ,ptWinPos, sizeWindow, m_hdcMemory, ptSrc, 0, Blend, 0x00000002/*ULW_ALPHA*/);
	
	DeleteObject(hBitMap);
	DeleteDC(m_hdcMemory);
}


/* 
 * ÉèÖÃFFT´°ÌåÎ»ÖÃ
 */
setFFTPos = function() {
	var x,y = win.getPos(mainForm.hwnd,true);
	if(fftForm) win.setPos(fftForm.hwnd,x-1,y+326);
}


//------------------------------------------------

fftForm.wndproc = {
	[0x18/*_WM_SHOWWINDOW*/] =  function (hwnd, message, wParam, lParam) {
		..fftFormActive = true;
	}

	[0x10/*_WM_CLOSE ´°¿Ú¹Ø±ÕÏûÏ¢*/] = function (hwnd, message, wParam, lParam) {
		..fftForm.redraw();
		for(i=1;math.floor(fftNum/2)+1;1) {
			FFTPeacks[i] = 0;
			FFTFallOff[i] = 0;
		}
		fftForm.show(false);
		..fftFormActive = false;
		return "noclose"; 
	}
	

	

}//endproc



//fftForm.show();

win.loopMessage();

return fftForm;
