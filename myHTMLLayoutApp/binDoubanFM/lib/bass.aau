//bass 音频播放
namespace bass{
	/**
		Version: 1.2;
		by @王超-Robin
		modified by wubin.in @搞起
		
		Sync回调函数的一个简单例子：
		var callback = bass.syncCallback(function(handle, channel, data, user){
			winform.msgbox("BASS Callback Test");
		},2);
		bass.setSyncCallback(callback);
		可重复上述过程反复绑定不同的回调函数；
		每次加载不同的文件后都要重新绑定。
	**/
	
	if(.._data)	dataDir = .._data;
	else {
		import fsys;
		dataDir = ..fsys.getSpecial(0x1a /*_CSIDL_APPDATA*/) ++ "\doubanFM_wubin";
	}
	
	try {
		_bass =..raw.loadDll("\bass.dll","bass.dll"); 
	}
	if(!_bass) {
		try {
			_bass =..raw.loadDll(dataDir++"\bass.audio","bass.dll");
		}	
	}
	if(!_bass) {
		import win;
		..win.msgbox('缺少bass.dll\r\n\r\n请自行下载bass.dll\r\n并置于本软件同一目录内',.._app);
		..win.quitMessage();
		return;
	}
	
	
	
	/* APIs */

	
	api = {
		BASS_ErrorGetCode = _bass.api("BASS_ErrorGetCode","int()" );
		BASS_GetVersion = _bass.api("BASS_GetVersion","INT()");
		BASS_Init = _bass.api("BASS_Init","bool(int device,INT freq,INT flags,INT hwnd,INT clsid)");
		BASS_StreamCreateFile = _bass.api("BASS_StreamCreateFile","INT(bool mem,string file,LONG offset,LONG length,INT flags)");
		BASS_StreamCreateURL = _bass.api("BASS_StreamCreateURL","INT(string url,INT offset,INT flags,pointer proc,pointer user)");
		BASS_StreamFree = _bass.api("BASS_StreamFree","bool(INT handle)");
		BASS_ChannelPlay = _bass.api("BASS_ChannelPlay","bool(INT handle,bool restart)");
		BASS_ChannelStop = _bass.api("BASS_ChannelStop","bool(INT handle)");
		BASS_ChannelGetLength = _bass.api("BASS_ChannelGetLength","int(INT handle,int mode)");
		BASS_ChannelGetInfo = _bass.api("BASS_ChannelGetInfo","bool(INT handle, struct& channelInfo)");		
		BASS_ChannelGetData = _bass.api("BASS_ChannelGetData","INT(INT handle, struct& buffer, int length)");		
		BASS_ChannelBytes2Seconds = _bass.api("BASS_ChannelBytes2Seconds","double(INT handle, long pos)");
		BASS_ChannelSeconds2Bytes = _bass.api("BASS_ChannelSeconds2Bytes","long(INT handle, double pos)");
		BASS_ChannelGetPosition = _bass.api("BASS_ChannelGetPosition","long(INT handle,int mode)");
		BASS_ChannelSetPosition = _bass.api("BASS_ChannelSetPosition","int(INT handle,long pos,int mode)");
		BASS_ChannelGetAttribute = _bass.api("BASS_ChannelGetAttribute","bool(INT handle, int attrib, float& value)");
		BASS_ChannelSetAttribute = _bass.api("BASS_ChannelSetAttribute","bool(INT handle, int attrib, float value)");
		BASS_ChannelSlideAttribute = _bass.api("BASS_ChannelSlideAttribute","bool(INT handle, int attrib, float value, int time)");
		BASS_ChannelFlags = _bass.api("BASS_ChannelFlags","int(INT handle, int flags, int mask)");
		BASS_ChannelSetSync = _bass.api("BASS_ChannelSetSync","INT(INT handle, INT type, LONG param, pointer proc, pointer user)");
		BASS_ChannelIsActive = _bass.api("BASS_ChannelIsActive","int(INT handle)");
		BASS_ChannelSetFX = _bass.api("BASS_ChannelSetFX","INT(INT handle, INT type, int priority)");
		BASS_ChannelRemoveFX = _bass.api("BASS_ChannelRemoveFX","bool(INT handle, INT hx)");		
		BASS_FXSetParameters = _bass.api("BASS_FXSetParameters","bool(INT handle, struct params)");
		BASS_FXReset =  _bass.api("BASS_FXReset","bool(INT handle)");
		BASS_GetCPU = _bass.api("BASS_GetCPU","float()");
		BASS_Stop = _bass.api("BASS_Stop","INT()");
		BASS_Free = _bass.api("BASS_Free","bool()");

	}
	
	/* Structs */
	
	class BASS_DEVICEINFO {
    	int name;          // description
    	int driver;        // driver
    	int flags;
	}
	class BASS_INFO {
    	int flags;         // device capabilities (DSCAPS_xxx flags)
    	int hwsize;        // size of total device hardware memory
    	int hwfree;        // size of free device hardware memory
    	int freesam;       // number of free sample slots in the hardware
    	int free3d;        // number of free 3D sample slots in the hardware
    	int minrate;       // min sample rate supported by the hardware
    	int maxrate;       // max sample rate supported by the hardware
    	int eax;           // device supports EAX? (always BASSFALSE if BASS_DEVICE_3D was not used)
    	int minbuf;        // recommended minimum buffer length in ms (requires BASS_DEVICE_LATENCY)
    	int dsver;         // DirectSound version
    	int latency;       // delay (in ms) before start of playback (requires BASS_DEVICE_LATENCY)
    	int initflags;     // BASS_Init "flags" parameter
    	int speakers;      // number of speakers available
    	int freq;          // current output rate
	}
	// Recording device info structure
	class BASS_RECORDINFO {
    	int flags;         // device capabilities (DSCCAPS_xxx flags)
    	int formats;       // supported standard formats (WAVE_FORMAT_xxx flags)
    	int inputs;        // number of inputs
    	int singlein;      // BASSTRUE = only 1 input can be set at a time
    	int freq;          // current input rate
	}
	// Channel info structure
	class BASS_CHANNELINFO {
    	int freq;          // default playback rate
    	int chans;         // channels
    	int flags;         // BASS_SAMPLE/STREAM/MUSIC/SPEAKER flags
    	int ctype;         // type of channel
    	int origres;       // original resolution
    	int plugin;        // plugin
    	int sample;        // sample
    	int filename;      // filename
	}
	channelInfo = BASS_CHANNELINFO();
	class BASS_PLUGINFORM {
    	int ctype;         // channel type
    	int name;          // format description
    	int exts;          // file extension filter (*.ext1;*.ext2;etc...)
	}
	class BASS_PLUGININFO {
    	int Version;       // version (same struct form;)
    	int formatc;       // number of formats
    	int formats;       // the array of formats
	}
	// 3D vector (for 3D positions/velocities/orientations)
	class BASS_3DVECTOR {
    	float X;           // +=right, -=left
    	float Y;           // +=up, -=down
    	float z;           // +=front, -=behind
	}


	/* Error Codes */
	errorCodes = {
		[0] = "BASS_OK";              //正常
		[1] = "BASS_ERROR_MEM";       //内存错误
		[2] = "BASS_ERROR_FILEOPEN";  //无法打开文件
		[3] = "BASS_ERROR_DRIVER";    //找不到免费的声音驱动程序
		[4] = "BASS_ERROR_BUFLOST";   //the sample buffer was lost
		[5] = "BASS_ERROR_HANDLE";    //无效的句柄
		[6] = "BASS_ERROR_FORMAT";    //不受支持的样本格式
		[7] = "BASS_ERROR_POSITION";  //位置无效
		[8] = "BASS_ERROR_INIT";      //BASS_Init 尚未成功调用
		[9] = "BASS_ERROR_START";     //BASS_Start 尚未成功调用
		[14] = "BASS_ERROR_ALREADY";  //已经初始化/暂停/其他
		[18] = "BASS_ERROR_NOCHAN";   //不能获得一个免费的电视频道
		[19] = "BASS_ERROR_ILLTYPE";  //指定了一个非法的类型
		[20] = "BASS_ERROR_ILLPARAM"; //指定了非法的参数
		[21] = "BASS_ERROR_NO3D";     //没有 3D 的支持
		[22] = "BASS_ERROR_NOEAX";    //没有 EAX 支持
		[23] = "BASS_ERROR_DEVICE";   //非法设备编号
		[24] = "BASS_ERROR_NOPLAY";   //播放错误
		[25] = "BASS_ERROR_FREQ";     //非法采样率
		[27] = "BASS_ERROR_NOTFILE";  //不是音频流文件
		[29] = "BASS_ERROR_NOHW";     //没有可用的硬件声音
		[31] = "BASS_ERROR_EMPTY";    //MOD 音乐没有任何序列数据
		[32] = "BASS_ERROR_NONET";    //没有网络
		[33] = "BASS_ERROR_CREATE";   //无法创建该文件
		[34] = "BASS_ERROR_NOFX";     //效果不可用
		[37] = "BASS_ERROR_NOTAVAIL"; //请求数据不可用
		[38] = "BASS_ERROR_DECODE";   // 通道是/不是"解码通道"
		[39] = "BASS_ERROR_DX";       //未安装足够的 DirectX 版本
		[40] = "BASS_ERROR_TIMEOUT";  //连接超时
		[41] = "BASS_ERROR_FILEFORM"; //不支持的文件格式
		[42] = "BASS_ERROR_SPEAKER";  //不可用扬声器
		[43] = "BASS_ERROR_VERSION";  //低音版本无效 （使用的加载项）
		[44] = "BASS_ERROR_CODEC";    //编码解码器不可用/支持
		[45] = "BASS_ERROR_ENDED";    //通道/文件播放结束
		[46] = "BASS_ERROR_BUSY";     //设备无响应
		[-1] = "BASS_ERROR_UNKNOWN";  //未知问题
	}
	
	/* Asserts */
	
	// 有输出参数时，判断第一个参数是否为FALSE
	self.assert = function( msg , ... ){
		if( !msg ){
			var errorCode = self.api.BASS_ErrorGetCode();
			//error('\r\n音频方面出现了一个错误：\r\n错误代码：' ++ errorCode)
			if(..onBassError) ..onBassError(errorCode);
		}
		return ...;
	}
	// 没有输出参数时，判断第一个参数是否为0
	self.assert2 = function( msg ){
		if( msg == 0 ){
			var errorCode = self.api.BASS_ErrorGetCode();
			//error('\r\n音频方面出现了一个错误：\r\n错误代码：' ++ errorCode)
			if(..onBassError) ..onBassError(errorCode);
		}
		return msg;
	}
	// 没有输出参数时，判断第一个参数是否为 FALSE，不返回
	self.assert3 = function( msg ){
		if( msg == false ){
			var errorCode = self.api.BASS_ErrorGetCode();
			//error('\r\n音频方面出现了一个错误：\r\n错误代码：' ++ errorCode)
			if(..onBassError) ..onBassError(errorCode);
		}
	}
	// 没有输出参数时，判断第一个参数是否为-1
	self.assert4 = function( msg ){
		if( msg == -1 ){
			var errorCode = self.api.BASS_ErrorGetCode();
			//error('\r\n音频方面出现了一个错误：\r\n错误代码：' ++ errorCode)
			if(..onBassError) ..onBassError(errorCode);
		}
		return msg;
	}
	// 没有输出参数时，判断第一个参数是否为负数
	self.assert5 = function( msg ){
		if( msg < 0 ){
			var errorCode = self.api.BASS_ErrorGetCode();
			//error('\r\n音频方面出现了一个错误：\r\n错误代码：' ++ errorCode)
			if(..onBassError) ..onBassError(errorCode);
		}
		return msg;
	}
	
	
	
	/* 线程订阅 */
	
	import thread.command;
	listener = thread.command();
	listener.callback = function(handle,path,...) {
		..binFM.monitor.info("异步URL流句柄",handle,...);
		if(handle!=0) {
			streamHandle = handle;
			if(..binFM.play.start) ..binFM.play.start(,handle,path,...); // 将句柄传回至..binFM.play.start()，其再调用play(,handle)以播放
			else play(,handle,,...);
		}
		else if(..onBassError) ..onBassError(40);
	}	
	
	
	/* Methods */
	
	// 创建流，并获取流句柄
	streamCreate = function(path) {
		var handle;
		if(..string.indexOf(path,"http://")==1) handle = self.assert2( self.api.BASS_StreamCreateURL(path,0,0x40000 && 128,null,null));
		else handle = self.assert2( self.api.BASS_StreamCreateFile( false,path,0,0,0x40000 && 128 ) );
		return handle;
	}
	
	
	// 播放歌曲。
	// 当有传入参数时，加载参数路径的歌曲并播放。
	// 没有传入参数时，播放之前加载的歌曲。
	// 返回歌曲长度。
	play = function( path = false,handle,... ){
		if( path && !handle){
			if( streamHandle ) stop();
			// 异步通过线程订阅获取流句柄
			listener.invoke(
			function(hwndListener,path,...) {
				import thread.command;
        		var listener = thread.command.bind(hwndListener);
        		listener.onBegin();
        		import bass;
        		var handle = bass.streamCreate(path);
        		if(handle) {
        			listener.callback(handle,path,...);
        			handle = null;
        		}
        		listener.onEnd();
			},path,...);
			return;
		}
		if(!path && handle) {
			streamHandle = handle;
			self.assert3( self.api.BASS_ChannelGetInfo( streamHandle, channelInfo) );
			var bytes = self.assert4( self.api.BASS_ChannelGetLength( streamHandle, 0 ) );
			seconds = ..math.floor(self.assert5( self.api.BASS_ChannelBytes2Seconds( streamHandle, bytes ))*1000);
		}
		if( streamHandle ){
			if(..volume!=null) setVolume(..volume);
			else setVolume(50);
			
			if(..onBassStart) {
				var callbackStart = syncCallback(..onBassStart,0,0);
				setSyncCallback(callbackStart);
			}
			if(..onBassEnd) {
				var callbackEnd = syncCallback(..onBassEnd,2,0);
				setSyncCallback(callbackEnd);
			}
			
			try {
				self.assert3( self.api.BASS_ChannelPlay( streamHandle ) );
			}

			return seconds
		}
		else {
			return 0;
		}
		
	}
	
	// 获取流总时间
	duration = function() {
		var bytes,seconds;
		if(streamHandle) {
			bytes = self.assert4( self.api.BASS_ChannelGetLength( streamHandle, 0 ) );
			seconds = ..math.floor(self.assert5( self.api.BASS_ChannelBytes2Seconds( streamHandle, bytes ))*1000);
		}
		return seconds;
	}
	
	// 暂停歌曲。
	pause = function(){
		if( streamHandle ){
			self.assert3( self.api.BASS_ChannelStop( streamHandle ) );
		}
	}
	
	// 停止播放
	stop = function() {
		if( streamHandle ){
			self.assert3( self.api.BASS_ChannelStop( streamHandle ) );
			streamFree();
		}	
	}
	
	// 获取播放状态
	isActive = function() {
		if( streamHandle ){
			var state = self.api.BASS_ChannelIsActive(streamHandle);
			return state;
		}
	}
	
	// 释放当前流
	streamFree = function() {
		if( streamHandle ){
			syncCallbackHandle = null;
			self.assert3( self.api.BASS_StreamFree( streamHandle ) );
			streamHandle = null;
			collectgarbage("collect"); // 内存回收
		}
	}
	
	// 释放BASS。
	// 请在程序关闭时调用此方法。
	free = function(){
		self.assert3( self.api.BASS_Free() );
	}
	
	// 获得当前播放位置。
	getPosition = function(){
		if( streamHandle ){
			var active = self.api.BASS_ChannelIsActive( streamHandle );
			if( active == 0 ){
				return null;
			}
			var bytes = self.assert4( self.api.BASS_ChannelGetPosition(streamHandle, 0) );
			var seconds = self.assert5( self.api.BASS_ChannelBytes2Seconds( streamHandle, bytes ) );
			return seconds * 1000;
		}
		else {
			return 0;
		}	
	}
	
	// 设置播放位置。
	setPosition = function( seconds ){
		if( streamHandle ){
			var bytes = self.assert4( self.api.BASS_ChannelSeconds2Bytes( streamHandle, seconds / 1000 ) );
			self.assert3( self.api.BASS_ChannelSetPosition( streamHandle, bytes, 0 ) );
		}
	}
	
	// 获得当前音量。范围为 1 ~ 100
	getVolume = function(){
		if( streamHandle ){
			var vol = self.assert( self.api.BASS_ChannelGetAttribute( streamHandle, 2, 0 ) );
			return vol * 100;
		}
	}
	
	// 获得当前音量。范围为 1 ~ 100
	setVolume = function( vol ){
		//..io.print("vol",vol);
		if( streamHandle ){
			self.assert3( self.api.BASS_ChannelSetAttribute( streamHandle, 2, vol / 100 ) );
		}
	}
	
	// 音量淡入淡出
	slideVolume = function(vol,time) {
		if( streamHandle ) {
			if(vol>0) vol = vol / 100;
			self.assert3( self.api.BASS_ChannelSlideAttribute( streamHandle, 2, vol, time) );
		}
	}
	
	// 设置Channel的Flags，详细参数参见BASS手册。
	setFlag = function( flag, mask ){
		if( streamHandle ){
			self.assert4( self.api.BASS_ChannelFlags( streamHandle, flag, mask ) );
		}
	}
	
	// 设置是否循环播放
	loop = function(isLoop) {
		if(isLoop) setFlag(4,4);
		else setFlag(0,4);
	}
	
	// 获取效果句柄
	fxHandle = function() {
		if( streamHandle ){
			return self.assert2( self.api.BASS_ChannelSetFX( streamHandle, 7, 1 ) );
		}	
	}
	
	removeFx = function(fxHandle) {
		if( streamHandle){
			..binFM.monitor.info("removeFX",fxHandle);
			return self.assert3( self.api.BASS_ChannelRemoveFX( streamHandle,fxHandle) );
		}	
	}
	
	// 设置效果
	setFxParams = function(fxHandle,params) {
		if(fxHandle && streamHandle) {
			..binFM.monitor.info(fxHandle,params.fBandwidth, params.fCenter, params.fGain);
			self.assert3( self.api.BASS_FXSetParameters( fxHandle,params ) );
		}
	}
	
	// 重置效果
	fxReset = function() {
		if( streamHandle ){
			return self.assert3( self.api.BASS_FXReset( streamHandle ) );
		}	
	}
	
	// 获取FFT数据
	getFFT = function(length) {
		if(length==1024) flag = 0x80000002;
		if(length==512) flag = 0x80000001;
		if(length==256) flag = 0x80000000;
		var count = ..math.floor(length/2);
		fftData = {
			float buffer[512];
		}
		if( streamHandle ){
			self.assert4( self.api.BASS_ChannelGetData( streamHandle, fftData, flag) );
			return fftData.buffer;	
		}
	}
	
	// 设置sync回调。
	setSyncCallback = function( callback ){
		if( streamHandle ){
			callback.changeHandle( self.assert2( self.api.BASS_ChannelSetSync( streamHandle, callback.syncType, callback.param, callback, null ) ) );
		}
	}
	
	/* Classes */
	class syncCallback{
		ctor( func, syncType, param = 0 ){
			import thread.command;
			this.func = func;
			this.syncType = syncType;
			this.param = param;
			
			this.handle = null;
			this.listener = thread.command();
			this.listener.bassSyncCallback = function(handle, channel, data, user){
				if( handle == this.handle ){
					this.func(handle, channel, data, user);
				}
			}
		};
		callback = function(handle, channel, data, user){
			import thread.command;
			thread.command.post("bassSyncCallback",handle, channel, data, user);
		}
		changeHandle = function(handle){
			this.handle = handle;
		}
		@{
			_topointer = function(){
				if( !this.pointer ){
					this.pointer = ..thread.tostdcall(this.callback,"(INT, INT, INT, pointer)");
				}
				return this.pointer;
			}
		}
	}
	
	/* Variables */
	var streamHandle; // 管理当前播放流的句柄
	
	/* Init */
	free();
	self.assert3( self.api.BASS_Init( -1, 192000, 4, 0, 0) );

}

/**intellisense(bass)
play() = 播放歌曲\n返回歌曲长度（毫秒）
play(__/*音乐文件路径*/) = 播放指定路径的歌曲\n返回歌曲长度（毫秒）
pause() = 暂停播放
free() = 释放资源\n务必在程序关闭前调用
getPosition() = 获取当前播放位置（毫秒）
setPosition(__/*毫秒数*/) = 设置播放位置
getVolume() = 获取音量，范围为1-100的整数
setVolume(__/*1-100的整数*/) = 设置音量
setFlag( = 设置Flag\n具体说明参见BASS手册中“Channels――BASS_ChannelFlags”
setFlag(.(flag,mask) = 设置Flag\n具体说明参见BASS手册中“Channels――BASS_ChannelFlags”
syncCallback(.(func, syncType, param) = Sync回调函数类\n参数@1为回调函数，传入四个参数\n参数@2为回调类型\n参数@3为回调参数\n创建完成后使用bass.setSyncCallback绑定\n详细信息请参见BASS手册中“Channels――BASS_ChannelSetSync”\n和“Channels――Callback functions――SYNCPROC”
setSyncCallback(__/*syncCallback对象*/) = 绑定Sync回调函数
end intellisense**/
